[{"title":"GlobalUpdates","type":0,"sectionRef":"#","url":"/DataKeep/api/GlobalUpdates","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GlobalUpdates","url":"/DataKeep/api/GlobalUpdates#types","content":" "},{"title":"GlobalID​","type":1,"pageTitle":"GlobalUpdates","url":"/DataKeep/api/GlobalUpdates#GlobalID","content":"&lt;/&gt; type GlobalID = number Used to identify a global update "},{"title":"Functions​","type":1,"pageTitle":"GlobalUpdates","url":"/DataKeep/api/GlobalUpdates#functions","content":" "},{"title":"AddGlobalUpdate​","type":1,"pageTitle":"GlobalUpdates","url":"/DataKeep/api/GlobalUpdates#AddGlobalUpdate","content":"&lt;/&gt; GlobalUpdates:AddGlobalUpdate(globalData: {}) → Promise&lt;GlobalID&gt; Adds a global update to the Keep globalUpdates:AddGlobalUpdate({ Hello = &quot;World!&quot;, }):andThen(function(updateId) print(&quot;Added Global Update!&quot;) end)   "},{"title":"GetActiveUpdates​","type":1,"pageTitle":"GlobalUpdates","url":"/DataKeep/api/GlobalUpdates#GetActiveUpdates","content":"&lt;/&gt; GlobalUpdates:GetActiveUpdates() → {GlobalUpdate} Returns all active global updates local updates = globalUpdates:GetActiveUpdates() for _, update in ipairs(updates) do print(update.Data) end   "},{"title":"RemoveActiveUpdate​","type":1,"pageTitle":"GlobalUpdates","url":"/DataKeep/api/GlobalUpdates#RemoveActiveUpdate","content":"&lt;/&gt; GlobalUpdates:RemoveActiveUpdate(updateId: GlobalID) → Promise&lt;void&gt; Removes an active global update local updates = globalUpdates:GetActiveUpdates() for _, update in ipairs(updates) do globalUpdates:RemoveActiveUpdate(update.ID):andThen(function() print(&quot;Removed Global Update!&quot;) end) end   "},{"title":"ChangeActiveUpdate​","type":1,"pageTitle":"GlobalUpdates","url":"/DataKeep/api/GlobalUpdates#ChangeActiveUpdate","content":"&lt;/&gt; GlobalUpdates:ChangeActiveUpdate( updateId: GlobalID, globalData: {} ) → Promise&lt;void&gt; Change an active global update's data to the new data. Useful for stacking updates to save space for Keeps that maybe recieving lots of globals. Ex. A YouTuber recieving gifts "},{"title":"Keep","type":0,"sectionRef":"#","url":"/DataKeep/api/Keep","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#types","content":" "},{"title":"ActiveSession​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#ActiveSession","content":"&lt;/&gt; type ActiveSession = { PlaceID: number, JobID: number }   "},{"title":"MetaData​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#MetaData","content":"&lt;/&gt; type MetaData = { ActiveSession: ActiveSession | nil, ForceLoad: ActiveSession | nil, LastUpdate: number }   "},{"title":"GlobalUpdates​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#GlobalUpdates","content":"&lt;/&gt; type GlobalUpdates = { ID: number, Updates: {[number]: GlobalUpdate} }   "},{"title":"Keep​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#Keep","content":"&lt;/&gt; type Keep = { Data: {}, MetaData: MetaData, GlobalUpdates: GlobalUpdates, UserIds: {}, OnGlobalUpdate: Signal&lt;GlobalUpdate&amp;number&gt;, GlobalStateProcessor: ( update: GlobalUpdate, lock: () → boolean, remove: () → boolean ) → void, OnRelease: Signal }  "},{"title":"Properties​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#properties","content":" "},{"title":"GlobalStateProcessor​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#GlobalStateProcessor","content":"&lt;/&gt; Keep.GlobalStateProcessor: ( updateData: GlobalUpdate, lock: () → boolean, remove: () → boolean ) → void Define how to process global updates, by default just locks the global update (this is only ran if the keep is online) The function is revealed the lock and remove global update function caution Updates must be locked eventually in order for OnGlobalUpdate to get fired warning The lock and remove function revealed here are NOT the same as the ones in the Keep class, they are only for this function.  "},{"title":"OnGlobalUpdate​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#OnGlobalUpdate","content":"&lt;/&gt; Keep.OnGlobalUpdate: Signal&lt;( updateData: {}, updateId: number )&gt; Fired when a new global update is locked and ready to be processed caution ONLY locked globals are fired  "},{"title":"OnRelease​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#OnRelease","content":"&lt;/&gt; Keep.OnRelease: Signal&lt;()&gt; Fired when the keep is released (fires before internally released, but after session release) "},{"title":"Functions​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#functions","content":" "},{"title":"Save​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#Save","content":"&lt;/&gt; Keep:Save( newestData: {KeepStruct}Thenewestdatatosave, release: {boolean}Whethertoreleasethekeepaftersaving ) → {KeepStruct}Thenewestdatatosave  caution Automatically called by the save cycle. If you want to manually save to progress GlobalUpdates faster, wrap in a UpdateAsync call and pass the newestData to the callback. As of right now it is messy to manually save, but it is possible. I will be adding a better way to do this in the future. keep._store:UpdateAsync(keep._key, function(newestData) return keep:Save(newestData, false) end) **RESETS AUTO SAVE TIMER ON THIS KEEP**   "},{"title":"IsActive​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#IsActive","content":"&lt;/&gt; Keep:IsActive() → {boolean} Returns if the Keep is active in the session (not locked by another server)  "},{"title":"Identify​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#Identify","content":"&lt;/&gt; Keep:Identify() → string Returns the string identifier for the Keep  "},{"title":"Release​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#Release","content":"&lt;/&gt; Keep:Release() → Promise&lt;Keep&gt;  warning This is called before internal release, but after session release, no edits can be made after this point  "},{"title":"Reconcile​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#Reconcile","content":"&lt;/&gt; Keep:Reconcile() → void Fills in any missing data in the Keep, using the data template  "},{"title":"GetActiveGlobalUpdates​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#GetActiveGlobalUpdates","content":"&lt;/&gt; Keep:GetActiveGlobalUpdates() → {Array&lt;{ Data: {}, ID: number }&gt;} Returns an array of active global updates (not locked/processed)  "},{"title":"GetLockedGlobalUpdates​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#GetLockedGlobalUpdates","content":"&lt;/&gt; Keep:GetLockedGlobalUpdates() → {Array&lt;{ Data: {}, ID: number }&gt;} Returns an array of locked global updates (processed) caution Lock updates can not be changed, only cleared after done being used.  "},{"title":"ClearLockedUpdate​","type":1,"pageTitle":"Keep","url":"/DataKeep/api/Keep#ClearLockedUpdate","content":"&lt;/&gt; Keep:ClearLockedUpdate(id: {number}) → Promise&lt;void&gt; Clears a locked global update after being used warning Passing an active global update id will throw an error &amp; reject the Promise. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/DataKeep/docs/Installation","content":"","keywords":""},{"title":"Roblox Plugin​","type":1,"pageTitle":"Installation","url":"/DataKeep/docs/Installation#roblox-plugin","content":"Coming soon "},{"title":"Wally​","type":1,"pageTitle":"Installation","url":"/DataKeep/docs/Installation#wally","content":"Download the module through Wally by adding this package! "},{"title":"Git Submodule​","type":1,"pageTitle":"Installation","url":"/DataKeep/docs/Installation#git-submodule","content":"Add this Repository as a git submodule "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/DataKeep/docs/intro","content":"","keywords":""},{"title":"What is DataKeep?​","type":1,"pageTitle":"Getting Started","url":"/DataKeep/docs/intro#what-is-datakeep","content":"DataKeep is a module that loads and autosaves to datastores A Keep Datastore (Holds datastore saving information &amp; methods) automatically saves itself and cleans up for you. "},{"title":"Why DataKeep?​","type":1,"pageTitle":"Getting Started","url":"/DataKeep/docs/intro#why-datakeep","content":"No getter/setter functions, allows ability to write your own wrapper interfaceSession Locking, prevents other servers from editing directly to prevent duplication exploits or overwriting data lossGlobalUpdates to communicate to offline KeepsSimilar API to previous data ModuleScript ProfileService allowing easy to pick upPromised base for control over exactly when things completeActively maintained, and accepting contributions "},{"title":"Ready to get started?​","type":1,"pageTitle":"Getting Started","url":"/DataKeep/docs/intro#ready-to-get-started","content":"InstallationAPI Documentation "},{"title":"Store","type":0,"sectionRef":"#","url":"/DataKeep/api/Store","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#types","content":" "},{"title":"StoreInfo​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#StoreInfo","content":"&lt;/&gt; type StoreInfo = { Name: string, Scope: string? } Table format for a store's info in :GetStore()  "},{"title":"Store​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#Store","content":"&lt;/&gt; type Store = { Mock: MockStore, LoadKeep: ( string, UnReleasedHandler? ) → Promise&lt;Keep&gt;, ViewKeep: (string) → Keep, PostGlobalUpdate: ( string, (GlobalUpdates) → nil ) → Promise&lt;void&gt; } Stores are used to load and save Keeps from a DataStoreService:GetDataStore()  "},{"title":"UnReleasedHandler​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#UnReleasedHandler","content":"&lt;/&gt; type UnReleasedHandler = (Keep.ActiveSession) → string Used to determine how to handle an session locked Keep Default: &quot;Ignore&quot; Ignores the locked Keep and steals the lock &quot;Cancel&quot; Cancels the load of the Keep "},{"title":"Functions​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#functions","content":" "},{"title":"GetStore​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#GetStore","content":"&lt;/&gt; Store.GetStore( storeInfo: StoreInfo | string, dataTemplate: any ) → Promise&lt;Store&gt; Loads a store from a DataStoreService:GetDataStore() and returns a Store object local keepStore = DataKeep.GetStore(&quot;TestStore&quot;, { Test = &quot;Hello World!&quot;, }):awaitValue()   "},{"title":"LoadKeep​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#LoadKeep","content":"&lt;/&gt; Store:LoadKeep( key: string, unReleasedHandler: UnReleasedHandler? ) → Promise&lt;Keep&gt; Loads a Keep from the store and returns a Keep object keepStore:LoadKeep(&quot;Player_&quot; .. player.UserId, function() return &quot;Ignore&quot; end)):andThen(function(keep) print(&quot;Loaded Keep!&quot;) end)   "},{"title":"ViewKeep​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#ViewKeep","content":"&lt;/&gt; Store:ViewKeep(key: string) → Promise&lt;Keep?&gt; Loads a Keep from the store and returns a Keep object, but doesn't save it View only Keeps have the same functions as normal Keeps, but can not operate on data keepStore:ViewKeep(&quot;Player_&quot; .. player.UserId):andThen(function(viewOnlyKeep) print(`Viewing {viewOnlyKeep:Identify()}`) end)   "},{"title":"PostGlobalUpdate​","type":1,"pageTitle":"Store","url":"/DataKeep/api/Store#PostGlobalUpdate","content":"&lt;/&gt; Store:PostGlobalUpdate( key: string, updateHandler: (GlobalUpdates) → nil ) → Promise&lt;void&gt; Posts a global update to a Keep updateHandler reveals globalUpdates to the API keepStore:PostGlobalUpdate(&quot;Player_&quot; .. player.UserId, function(globalUpdates) globalUpdates:AddGlobalUpdate({ Hello = &quot;World!&quot;, }):andThen(function(updateId) print(&quot;Added Global Update!&quot;) end) end)  "},{"title":"DataKeep vs ProfileService","type":0,"sectionRef":"#","url":"/DataKeep/docs/Versus","content":"DataKeep vs ProfileService ProfileService the number one datastore module by loleris is a great module. However, not flawless in my opinion which is why DataKeep was born. Flaws in ProfileService: Profile does not automatically clean up internal connections, making the developer have to perform inconvenient clean upsProfileService async calls make it difficult to wait for Profiles to be loaded. Causing weird patterns when waiting for Profiles, DataKeep is promise basedShorter, cleaner, scripts for faster future development, and contributors (vs ProfileService fitting classes inside one script for micro-performance)Type checking, one caveat due to Luau limitations, can not type check what Promises return (shows on documentation)","keywords":""},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/DataKeep/docs/Usage","content":"Basic Usage Missing docs... oops","keywords":""}]